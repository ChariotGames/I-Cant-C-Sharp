using _Scripts.Games;
using UnityEditor;
using UnityEngine;

namespace _Scripts.EditorExtensions
{
    /// <summary>
    /// This can be used to restructure the inspector a little bit.
    /// To group items in collapsable items and change appearences.
    /// Please use with caution! 
    /// </summary>
    [CustomEditor(typeof(#SCRIPTNAME#))]
    public class #SCRIPTNAME#Editor : Editor
    {
        SerializedProperty manager, currentDifficulty;

        bool showGameProperties = false;

        void OnEnable()
        {
            currentDifficulty = serializedObject.FindProperty("currentDifficulty");
            manager = serializedObject.FindProperty("manager");
        }

        public override void OnInspectorGUI()
        {
            #SCRIPTNAME# script = (#SCRIPTNAME#)target;

            serializedObject.Update();

            GUILayout.BeginVertical("box");
            showGameProperties = EditorGUILayout.Foldout(showGameProperties, "Base Game Properties");
            if (showGameProperties)
            {
                DrawScriptField();
                EditorGUILayout.PropertyField(manager);
                EditorGUILayout.PropertyField(currentDifficulty);
            }
            GUILayout.EndVertical();

            serializedObject.ApplyModifiedProperties();
        }

        /// <summary>
        /// Draws a Foldout Group for given serialized properties.
        /// </summary>
        /// <param name="baseGame">Specifies if this is a base game foldout. Only needed once!</param>
        /// <param name="status">The current foldout status.</param>
        /// <param name="groupName">The name for this group show in the inspector.</param>
        /// <param name="serializedFields">List of properties name strings to group.</param>
        /// <returns>The new state of the foldout.</returns>
        private bool DrawFoldout(bool baseGame, bool status, string groupName, string[] serializedFields)
        {
            GUILayout.BeginVertical("Box");
            status = EditorGUILayout.Foldout(status, groupName);
            if (baseGame)
            {
                DrawScriptField();
            }
            if (status)
            {
                foreach (string field in serializedFields)
                {
                    EditorGUILayout.PropertyField(serializedObject.FindProperty(field));
                }
            }
            GUILayout.EndVertical();

            return status;
        }

        /// <summary>
        /// Draws the usual script field, without it, it's gone.
        /// </summary>
        private void DrawScriptField()
        {
            EditorGUI.BeginDisabledGroup(true);
            EditorGUILayout.ObjectField("Script", (#SCRIPTNAME#)target, typeof(#SCRIPTNAME#), false);
            EditorGUI.EndDisabledGroup();
        
            EditorGUILayout.Space();
        }
    }
}