using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace _Scripts.Games
{
    /// <summary>
    /// TODO: Provide a summary of your game here.
    /// To create an auto-generated summary template
    /// type 3 /// slash characters after you have
    /// written your class or method signature.
    /// 
    /// On Level 1, describe the difficulty levels.
    /// On Level 2, keep it short and concise.
    /// On Level 3, maybe one-liners are possible.
    /// </summary>
    public class #SCRIPTNAME# : BaseGame
    {
        /**
         * TODO: General Structure Ideas:
         * 
         * Try to keep an order of fields from most complex to primitive.
         * GameObject go;
         * struct point;
         * float num;
         * bool truthy;
         * 
         * Constants before variables maybe too.
         * const int TIME_PLANNED_FOR_THIS
         * int timeSpentOnThis
         * 
         * Also from most public to private. Valid for methods too.
         * public
         * internal
         * protected
         * private
         * 
         *  Then only probably by alphabet. If at all
         */

        #region Serialized Fields

        // TODO: Put all the serialized fields here.

        #endregion Serialized Fields

        #region Fields

        // TODO: Put general non-serialized fields here.

        #endregion Fields

        #region Built-Ins / MonoBehaviours

        // TODO: Put Unity built-in event methods here.
        // Such as Awake, Start, Update.
        // But also OnEnable, OnDestroy, OnTrigger and such.

        // Start is called before the first frame update
        void Start()
        {
            #NOTRIM#
        }

        // Update is called once per frame
        void Update()
        {
            #NOTRIM#
        }

        #endregion Built-Ins / MonoBehaviours

        #region GetSets / Properties

        // TODO: Put Auto-Properties to your fields here.
        //
        // These are used for private fields as getters and setters.
        // Since they are very game specific, they are down here.
        // The structure is (amost) always the same. Copy-Paste.

        /**
        public returnType FieldNameWithCapitalStart
        {
            get => fieldName;
            set => fieldName = value;
        }
        */

        #endregion GetSets / Properties

        #region Game Mechanics / Methods

        // TODO: Put your game specific mechanics here.
        // If they can be grouped by functionality, do so.

        /// <summary>
        /// TODO: Provide a summary for the method
        /// </summary>
        /// <param name="param">List the parameters.</param>
        /// <returns>Specify what it returns, if it does so.</returns>

        public void TemplateMethod(bool param)
        {
            // TODO: YOUR CODE GOES HERE
        }

        #endregion Game Mechanics / Methods

        #region Overarching Methods / Helpers

        // TODO: Put your helper methods here.

        #endregion Overarching Methods / Helpers
    }

    #region Editor Overrides

    /// <summary>
    /// This can be used to restructure the inspector a little bit.
    /// To group items in collapsable items and change appearences.
    /// Please use with caution! Otherwise DELETE THE WHOLE REGION!
    /// </summary>
    [CustomEditor(typeof(#SCRIPTNAME#))]
    public class #SCRIPTNAME#Editor : Editor
    {
        SerializedProperty manager, currentDifficulty;

        bool showGameProperties = false;

        void OnEnable()
        {
            currentDifficulty = serializedObject.FindProperty("currentDifficulty");
            manager = serializedObject.FindProperty("manager");
        }

        public override void OnInspectorGUI()
        {
            serializedObject.Update();

            showGameProperties = EditorGUILayout.Foldout(showGameProperties, "Base Game Properties");
            if (showGameProperties)
            {
                EditorGUILayout.PropertyField(manager);
                EditorGUILayout.PropertyField(currentDifficulty);
            }

            serializedObject.ApplyModifiedProperties();
        }
    }

    #endregion Editor Overrides
}